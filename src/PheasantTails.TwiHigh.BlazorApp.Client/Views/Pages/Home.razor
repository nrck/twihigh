@page "/Home"
@*
    Home page
*@
@rendermode InteractiveWebAssembly
@attribute [Authorize]
@inherits TwiHighPageBase
@implements IAsyncDisposable
@inject IHomeViewModel ViewModel
@inject ITimelineWorkerService WorkerService
@inject IScrollInfoService ScrollInfoService

@* Title *@
<PageTitle>ホーム - ツイハイ！</PageTitle>
<THPageHeaderTitle Title="ホーム" />

@* Tweet post form *@
<section>
    <THPostForm UserAvatarUrl="@ViewModel.AvatarUrl.Value"
                OnClickAvatarCommand="@ViewModel.NavigateProfileEditorPageCommand"
                OnPostTweetCommand="@ViewModel.PostTweetCommand"
                IsForceForcus=true />
</section>

@* Timeline *@
@if (WorkerService.Timeline.Count == 0)
{
    <THNoContents NoContentsText="@("まずは @twihigh をフォローしてみよう！")" />
}
else
{
    <THTimeline @key="@ViewModel.MyTwiHighUserId.Value"
                Tweets="@WorkerService.Timeline"
                MyTwiHithUserId=@ViewModel.MyTwiHighUserId.Value
                OnClickDelete="async (t) => await ViewModel.DeleteMyTweetCommand.ExecuteAsync(t)"
                OnPostReply="async (t) => await ViewModel.PostTweetCommand.ExecuteAsync(t)"
                OnClickProfileEditor="() => ViewModel.NavigateProfileEditorPageCommand.Execute()"
                OnClickProfile="(t) => ViewModel.NavigateUserPageCommand.Execute(t)"
                OnClickGapTweetsLoad="async (t) => await ViewModel.GetGapTweetCommand.ExecuteAsync(t)"
                OnClickDetail="(t) => ViewModel.NavigateStatePageCommand.Execute(t)" />
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);
        ScrollInfoService.OnScroll += ViewModel.MarkAsReadedTweetCommand.Execute;
        WorkerService.OnChangedTimeline += InvokeRender;
        await ViewModel.GetLoginUserIdCommand.ExecuteAsync().ConfigureAwait(false);
        await ViewModel.GetMyAvatarUrlCommand.ExecuteAsync().ConfigureAwait(false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender).ConfigureAwait(false);
        if (firstRender)
        {
            await ScrollInfoService.EnableAsync();
            WorkerService.Run();
        }
    }

    public async ValueTask DisposeAsync()
    {
        ScrollInfoService.OnScroll -= ViewModel.MarkAsReadedTweetCommand.Execute;
        WorkerService.OnChangedTimeline -= InvokeRender;
        WorkerService.Stop();
        await ScrollInfoService.DisableAsync();
        GC.SuppressFinalize(this);
    }

    private async void InvokeRender() => await InvokeRenderAsync().ConfigureAwait(false);
}