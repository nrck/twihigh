@using System.Collections.ObjectModel
@using PheasantTails.TwiHigh.Data.Model.Tweets
@using Reactive.Bindings
@inherits TwiHighComponentBase

@* ツイート外枠 *@
<section id="timeline">
    @if (Tweets == null)
    {
        <THLoading />
    }
    else if (!Tweets.Any())
    {
        <THNoContents />
    }
    else
    {
        <Virtualize Items="@Tweets" Context="Tweet" ItemSize="72" OverscanCount="15">
            @if (Tweet.IsSystemTweet)
            {
                <THGapTweetsFetchButton @key="Tweet.Id" Tweet="Tweet" OnClick="OnClickGapTweetsLoadAsync" />
            }
            else
            {
                <THTweet @key="Tweet.Id"
                         Tweet="Tweet"
                         IsMyTweet=@(MyTwiHithUserId == Tweet.UserId)
                         DeleteTweetCommand="DeleteTweetCommand"
                         OnClickDetail="OnClickDetailAsync"
                         OnClickFavorite="OnClickFavoriteAsync"
                         OnClickProfile="OnClickProfileAsync"
                         OnClickRetweet="OnClickRetweetAsync"
                         PostTweetCommand="PostTweetCommand"
                         OnClickProfileEditor="OnClickProfileEditorAsync" />
            }
        </Virtualize>
    }
</section>

@code {
    /// <summary>
    /// タイムラインに表示するツイートList
    /// </summary>
    [Parameter, EditorRequired]
    public ReadOnlyCollection<DisplayTweet> Tweets { get; set; } = default!;

    [Parameter]
    public Guid MyTwiHithUserId { get; set; }

    /// <summary>
    /// リプライが投稿されたときに発火するイベントコールバック
    /// </summary>
    [Parameter]
    public AsyncReactiveCommand<PostTweetContext> PostTweetCommand { get; set; } = default!;

    /// <summary>
    /// ツイート削除ボタンが押下されたときに発火するイベントコールバック
    /// </summary>
    [Parameter]
    public AsyncReactiveCommand<DisplayTweet> DeleteTweetCommand { get; set; } = default!;

    /// <summary>
    /// ツイート詳細が押下されたときに発火するイベントコールバック
    /// </summary>
    [Parameter]
    public EventCallback<DisplayTweet> OnClickDetail { get; set; }

    /// <summary>
    /// リツイートが押下されたときに発火するイベントコールバック
    /// </summary>
    [Parameter]
    public EventCallback<DisplayTweet> OnClickRetweet { get; set; }

    /// <summary>
    /// お気に入りが押下されたときに発火するイベントコールバック
    /// </summary>
    [Parameter]
    public EventCallback<DisplayTweet> OnClickFavorite { get; set; }

    /// <summary>
    /// プロフィール欄への遷移が発生したときに発火するイベントコールバック
    /// </summary>
    [Parameter]
    public EventCallback<DisplayTweet> OnClickProfile { get; set; }

    /// <summary>
    /// プロフィール編集欄への遷移が発生したときに発火するイベントコールバック
    /// </summary>
    [Parameter]
    public EventCallback OnClickProfileEditor { get; set; }

    /// <summary>
    /// 更にツイートを取得ボタンが押下されたときに発火するイベントコールバック
    /// </summary>
    [Parameter]
    public EventCallback<DisplayTweet> OnClickGapTweetsLoad { get; set; }

    private Task OnClickDetailAsync(DisplayTweet tweet) => OnClickDetail.InvokeAsync(tweet);

    private Task OnClickRetweetAsync(DisplayTweet tweet) => OnClickRetweet.InvokeAsync(tweet);

    private Task OnClickFavoriteAsync(DisplayTweet tweet) => OnClickFavorite.InvokeAsync(tweet);

    private Task OnClickProfileAsync(DisplayTweet tweet) => OnClickProfile.InvokeAsync(tweet);

    private Task OnClickProfileEditorAsync() => OnClickProfileEditor.InvokeAsync();

    private Task OnClickGapTweetsLoadAsync(DisplayTweet tweet) => OnClickGapTweetsLoad.InvokeAsync(tweet);
                         }