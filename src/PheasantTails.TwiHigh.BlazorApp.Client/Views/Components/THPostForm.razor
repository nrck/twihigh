@*
    Tweet post form component.
*@
@using PheasantTails.TwiHigh.Data.Model.Tweets
@using System.Windows.Input
@using PheasantTails.TwiHigh.Data.Model.TwiHighUsers
@using Reactive.Bindings
@inherits TwiHighComponentBase

<article class="post-article">
    <div class="post-article-left">
        <THAvatar UserAvatarUrl="@UserAvatarUrl" @onclick="OnClickMyAvatar" />
    </div>
    <div class="tweet-post-form">
        <div class="tweet-post-textarea">
            <textarea @ref="TextArea" value="@TweetText" placeholder="いまどうしてる？" @onkeypress="OnKeyPressAsync" @oninput="OnInputTextarea" disabled="@IsPosting" />
        </div>
        <div class="tweet-post-submit-button">

            @if (IsPosting)
            {
                <button type="button" disabled>
                    送信中
                </button>
            }
            else
            {
                <button type="button" @onclick="OnSubmitAsync">
                    ツイートする
                </button>
            }
        </div>
    </div>
</article>

@code {
    [Parameter]
    public string UserAvatarUrl { get; set; } = string.Empty;

    [Parameter]
    public ReplyToContext? ReplyToContext { get; set; }

    [Parameter]
    public ICommand OnClickAvatarCommand { get; set; } = default!;

    [Parameter, EditorRequired]
    public AsyncReactiveCommand<PostTweetContext> PostTweetCommand { get; set; } = default!;

    [Parameter]
    public string TweetText { get; set; } = string.Empty;

    [Parameter]
    public bool IsForceForcus { get; set; }

    private PostTweetContext PostTweetContext { get; set; } = new PostTweetContext();

    private bool IsPosting { get; set; }

    private ElementReference TextArea { get; set; }

    public ValueTask TextAreaFocusAsync() => TextArea.FocusAsync();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        UserAvatarUrl = await((TwiHighAuthenticationStateProvider)AuthenticationStateProvider).GetLoggedInUserAvatarUrlAsync().ConfigureAwait(false);
    }

    private async Task OnSubmitAsync()
    {
        if (string.IsNullOrEmpty(TweetText) || IsPosting)
        {
            return;
        }

        IsPosting = true;
        StateHasChanged();
        PostTweetContext.Text = TweetText;
        PostTweetContext.ReplyTo = ReplyToContext;
        await PostTweetCommand.ExecuteAsync(PostTweetContext).ConfigureAwait(false);
        PostTweetContext.Text = string.Empty;
        PostTweetContext.ReplyTo = null;
        TweetText = string.Empty;
        IsPosting = false;
        if (IsForceForcus)
        {
            StateHasChanged();
            await TextArea.FocusAsync();
        }
    }

    private async Task OnKeyPressAsync(KeyboardEventArgs e)
    {
        if (IsPosting)
        {
            // 処理中なら送信しない
            return;
        }

        if (e.CtrlKey && (e.Code == "Enter" || e.Code == "NumpadEnter"))
        {
            await OnSubmitAsync();
        }
    }

    private void OnInputTextarea(ChangeEventArgs e) => TweetText = e.Value?.ToString() ?? string.Empty;

    private void OnClickMyAvatar() => OnClickAvatarCommand.Execute(null);
}